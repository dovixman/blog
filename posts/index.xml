<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Dovixmans Blog</title><link>http://dovixman.github.io/blog/posts/</link><description>All Posts | Dovixmans Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 15 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://dovixman.github.io/blog/posts/" rel="self" type="application/rss+xml"/><item><title>Introducción a Protocol Buffers</title><link>http://dovixman.github.io/blog/introduccion-a-protocol-buffers/</link><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate><author>David</author><guid>http://dovixman.github.io/blog/introduccion-a-protocol-buffers/</guid><description>Protocol Buffers es el mecanismo diseñado por Google para serializar y deserializar datos estructurados. Google decidió crear este mecanismo como alternativa a XML o JSON, en busca de una forma más eficiente de serializar y deserializar los datos.
Protocol Buffer o Protobuf, es agnóstico del lenguaje y la plataforma utilizados para implementarlo, y está creado para ser extensible, lo que facilita la evolución y mantenimiento de este el la vida de un proyecto.</description></item><item><title>Java 8: Streams</title><link>http://dovixman.github.io/blog/streams-java-8/</link><pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate><author>David</author><guid>http://dovixman.github.io/blog/streams-java-8/</guid><description>Junto con las expresiones lambda, los Streams son una de las funcionalidades más relevantes de Java 8, y trae consigo una nueva forma de trabajar. Mediante una capa de abstracción, los Streams nos permiten definir la lógica de negocio como un conjunto de funciones que se ejecutan de forma anidada.
De este modo, podemos trabajar con colecciones utilizando el paradigma de programación funcional, que nos permite definir las funciones a ejecutar de una forma mucho más clara y, en cierto modo, lo más parecida posible a como lo haríamos las personas en una situación real.</description></item><item><title>Java 8: Novedades en interfaces</title><link>http://dovixman.github.io/blog/novedades-en-interfaces-java-8/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate><author>David</author><guid>http://dovixman.github.io/blog/novedades-en-interfaces-java-8/</guid><description>Hasta Java 8, las interfaces únicamente podían implementar métodos públicos y abstractos por defecto.
En la versión de Java 8 esto ha cambiado, se ha extendido la funcionalidad de las interfaces, de modo que puedan albergar métodos estáticos y métodos default que nos permiten definir lógica de negocio dentro de las propias interfaces.
Métodos default El objetivo que se persigue con este tipo de funcionalidad es dar a las interfaces la capacidad de definir un comportamiento estándar para toda clase que las implemente, pudiendo especializar cualquiera de los métodos definidos sobreescribiéndolos en la propia implementación de la clase.</description></item><item><title>Java 8: Referencias a métodos y constructores</title><link>http://dovixman.github.io/blog/referencias-metodos-constructores-java-8/</link><pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate><author>David</author><guid>http://dovixman.github.io/blog/referencias-metodos-constructores-java-8/</guid><description>La referenciación a métodos y constructores es otra de las funcionalidades que nos ofrece Java 8, y que nos permite utilizar dichas referencias a modo de expresiones lambda.
Estas referencias son lo que en inglés se denomina &amp;ldquo;syntactic sugar&amp;rdquo;, y consiste en pequeños añadidos a la sintaxis de Java diseñados para hacer algunas construcciones más fáciles de leer o expresar.
Las referencias a métodos y constructores sólo pueden ser utilizadas cuando la interfaz funcional coincide con el patrón del método referenciado.</description></item><item><title>Java 8: Interfaces funcionales.</title><link>http://dovixman.github.io/blog/interfaces-funcionales-java-8/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><author>David</author><guid>http://dovixman.github.io/blog/interfaces-funcionales-java-8/</guid><description>Las interfaces funcionales son todas aquellas interfaces que definen un único método abstracto, pudiendo implementar uno o varios métodos default o static.
Este nuevo tipo de interfaces son especialmente importantes debido a que son la base de la implementación de las nuevas expresiones lambda, una de las funcionalidades más importantes de Java 8.
A continuación podemos ver un ejemplo de interfaz funcional, en la que se define un único método abstracto, y varios métodos default y static:</description></item><item><title>Java 8: Expresiones Lambda</title><link>http://dovixman.github.io/blog/expresiones-lambda-java-8/</link><pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate><author>David</author><guid>http://dovixman.github.io/blog/expresiones-lambda-java-8/</guid><description>Las expresiones lambda son una de las múltiples funcionalidades nuevas que nos ofrece Java 8. Estas expresiones son parte de los primeros pasos de Java hacia la programación funcional, y su cometido es introducirnos a las funciones anónimas mediante las cuales podemos definir el comportamiento de los objetos, y los datos que encapsulan.
¿En qué consiste la programación funcional? La programación funcional es un paradigma de programación basado en las funciones matemáticas, que especifica que una función que recibe un parámetro X, siempre devolverá un resultado Y.</description></item></channel></rss>